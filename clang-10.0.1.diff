diff --git a/clang/lib/Format/ContinuationIndenter.cpp b/clang/lib/Format/ContinuationIndenter.cpp
index 2ff6e5ec234..573f26c511b 100644
--- a/clang/lib/Format/ContinuationIndenter.cpp
+++ b/clang/lib/Format/ContinuationIndenter.cpp
@@ -758,6 +758,9 @@ unsigned ContinuationIndenter::addTokenOnNewLine(LineState &State,
     Penalty += Style.PenaltyBreakFirstLessLess;

   State.Column = getNewLineColumn(State);
+  if (State.Line->startsWith(tok::kw_for) && PreviousNonComment &&
+      PreviousNonComment->is(tok::semi))
+    State.Column -= State.Column % 4;

   // Indent nested blocks relative to this column, unless in a very specific
   // JavaScript special case where:
@@ -1129,7 +1132,7 @@ unsigned ContinuationIndenter::moveStateToNextToken(LineState &State,
     //       ^ line up here.
     State.Stack.back().Indent =
         State.Column +
-        (Style.BreakConstructorInitializers == FormatStyle::BCIS_BeforeComma
+        (Style.BreakConstructorInitializers != FormatStyle::BCIS_AfterColon
              ? 0
              : 2);
     State.Stack.back().NestedBlockIndent = State.Stack.back().Indent;
diff --git a/clang/lib/Format/Format.cpp b/clang/lib/Format/Format.cpp
index f12bca48c63..f3cef557917 100644
--- a/clang/lib/Format/Format.cpp
+++ b/clang/lib/Format/Format.cpp
@@ -2534,7 +2534,7 @@ const char *StyleOptionHelpDescription =
     "Coding style, currently supports:\n"
     "  LLVM, Google, Chromium, Mozilla, WebKit.\n"
     "Use -style=file to load style configuration from\n"
-    ".clang-format file located in one of the parent\n"
+    ".haiku-format file located in one of the parent\n"
     "directories of the source file (or current\n"
     "directory for stdin).\n"
     "Use -style=\"{key: value, ...}\" to set specific\n"
@@ -2619,8 +2619,8 @@ llvm::Expected<FormatStyle> getStyle(StringRef StyleName, StringRef FileName,
     return make_string_error(EC.message());

   llvm::SmallVector<std::string, 2> FilesToLookFor;
-  FilesToLookFor.push_back(".clang-format");
-  FilesToLookFor.push_back("_clang-format");
+  FilesToLookFor.push_back(".haiku-format");
+  FilesToLookFor.push_back("_haiku-format");

   for (StringRef Directory = Path; !Directory.empty();
        Directory = llvm::sys::path::parent_path(Directory)) {
diff --git a/clang/lib/Format/TokenAnnotator.cpp b/clang/lib/Format/TokenAnnotator.cpp
index 8cb786a4d34..7a0b97c0926 100644
--- a/clang/lib/Format/TokenAnnotator.cpp
+++ b/clang/lib/Format/TokenAnnotator.cpp
@@ -2073,6 +2073,7 @@ private:

 void TokenAnnotator::setCommentLineLevels(
     SmallVectorImpl<AnnotatedLine *> &Lines) {
+  AnnotatedLine *NextCommentLine = nullptr;
   const AnnotatedLine *NextNonCommentLine = nullptr;
   for (SmallVectorImpl<AnnotatedLine *>::reverse_iterator I = Lines.rbegin(),
                                                           E = Lines.rend();
@@ -2085,6 +2086,16 @@ void TokenAnnotator::setCommentLineLevels(
       }
     }

+    if (CommentLine) {
+      NextCommentLine = *I;
+    } else {
+      if (NextCommentLine && NextCommentLine->First->NewlinesBefore == 1 &&
+          NextCommentLine->First->OriginalColumn ==
+          (*I)->First->OriginalColumn + 4)
+        NextCommentLine->Level = (*I)->Level + 1;
+      NextCommentLine = nullptr;
+    }
+
     // If the comment is currently aligned with the line immediately following
     // it, that's probably intentional and we should keep it.
     if (NextNonCommentLine && CommentLine &&
@@ -2146,6 +2157,15 @@ void TokenAnnotator::annotate(AnnotatedLine &Line) {

   Line.First->SpacesRequiredBefore = 1;
   Line.First->CanBreakBefore = Line.First->MustBreakBefore;
+
+  static bool Comment = false;
+  if (Line.First->is(tok::comment))
+    Comment = true;
+  else if (Comment)
+    Comment = false;
+  else if (Line.Level == 0 && !Line.First->IsFirst &&
+           Line.MightBeFunctionDecl && Line.mightBeFunctionDefinition())
+	Line.First->NewlinesBefore = 3;
 }

 // This function heuristically determines whether 'Current' starts the name of a
@@ -3224,6 +3244,9 @@ bool TokenAnnotator::mustBreakBefore(const AnnotatedLine &Line,
       Right.Previous->MatchingParen->NestingLevel == 0 &&
       Style.AlwaysBreakTemplateDeclarations == FormatStyle::BTDS_Yes)
     return true;
+  if (Left.NestingLevel == 0 &&
+      Left.isOneOf(TT_CtorInitializerColon, TT_CtorInitializerComma))
+    return true;
   if (Right.is(TT_CtorInitializerComma) &&
       Style.BreakConstructorInitializers == FormatStyle::BCIS_BeforeComma &&
       !Style.ConstructorInitializerAllOnOneLineOrOnePerLine)
diff --git a/clang/tools/clang-format/ClangFormat.cpp b/clang/tools/clang-format/ClangFormat.cpp
index aa40bab52df..b1b071cfdd0 100644
--- a/clang/tools/clang-format/ClangFormat.cpp
+++ b/clang/tools/clang-format/ClangFormat.cpp
@@ -441,7 +441,7 @@ static bool format(StringRef FileName) {
 } // namespace clang

 static void PrintVersion(raw_ostream &OS) {
-  OS << clang::getClangToolFullVersion("clang-format") << '\n';
+  OS << clang::getClangToolFullVersion("haiku-format") << '\n';
 }

 // Dump the configuration.
